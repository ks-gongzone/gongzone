<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gongzone.central.party.accept.mapper.AcceptMapper">
    <select id="getPartyList" resultType="AcceptDetail">
        SELECT
            b.b_title AS boardTitle,
            CONCAT('[', c.c_group1, ']', c.c_group2, ' - ', c.c_group3) AS partyCateCode,
            p.p_url AS productUrl,
            b.b_body AS boardBody,
            p.p_amount AS partyAmount,
            p.p_amount_remain AS remainAmount,
            p.p_price AS partyPrice,
            p.p_price_remain AS remainPrice,
            b.b_period AS endDate,
            p.status_code AS status,
            CONCAT(l.location_do, ' ', l.location_si, ' ', l.location_gu, ' ', l.location_dong, ' ', l.location_detail) AS address,
            p.p_no AS partyNo,
            b.m_no AS partyLeader,
            f.file_path AS img,
            b.b_no AS boardNo,
            b.status_code AS boardStatus,
            ps.shipping_no AS shippingNo,
            pts.status_code AS settlementCode

        FROM
            party AS p
                INNER JOIN
            board AS b
            ON
                p.b_no = b.b_no
                INNER JOIN
            location AS l
            ON
                b.b_no = l.b_no
                INNER JOIN
            category AS c
            ON
                c.c_code = p.c_code
                INNER JOIN
            file_relation AS fr
            ON
                b.b_no = fr.file_usage
                INNER JOIN
            file AS f
            ON
                f.file_no = fr.file_no
                LEFT JOIN
            party_shipping AS ps
            ON
                p.p_no = ps.p_no
                LEFT JOIN
            party_settlement AS pts
            ON
                p.p_no = pts.p_no
        WHERE
            p.p_no = #{partyNo};
    </select>
    <select id="getParticipants" resultType="com.gongzone.central.party.accept.domain.AcceptMember">
        SELECT
            m.m_nick AS memberNick,
            pm.pm_amount AS memberAmount,
            m.m_email AS memberEmail,
            m.m_no AS memberNo,
            pm.p_no AS partyNo,
            pm.pm_price AS requestPrice,
            pm.p_member_no AS partyMemberNo,
            pr.r_no AS receptionNo
        FROM
            party_member AS pm
                INNER JOIN
            member AS m
            ON
                pm.m_no = m.m_no
                LEFT JOIN
            party_reception AS pr
            ON
                pm.p_member_no = pr.p_member_no
        WHERE
            pm.p_no = #{partyNo};
    </select>

    <select id="getRequestMember" resultType="com.gongzone.central.party.accept.domain.RequestMember">
        SELECT
            m.m_nick AS memberNick,
            pr.request_amount AS memberAmount,
            m.m_email AS memberEmail,
            pr.status_code AS requestStatus,
            m.m_no AS memberNo,
            pr.p_no AS partyNo
        FROM
            party_request AS pr
                INNER JOIN
            member AS m ON pr.m_no = m.m_no
        WHERE
            pr.p_no = #{partyNo};
    </select>


    <!-- 파티 번호 찾기 -->
    <select id="findPointNoByMemberNo" parameterType="String" resultType="String">
        (SELECT DISTINCT p.p_no AS partyNo
        FROM party AS p
        INNER JOIN party_member AS pm ON p.p_no = pm.p_no
        <where>
            <if test="memberNo != '_admin'">
                pm.m_no = #{memberNo}
            </if>
        </where>
        )
        UNION
        (SELECT DISTINCT p.p_no AS partyNo
        FROM party AS p
        INNER JOIN party_request AS pr ON p.p_no = pr.p_no
        <where>
            <if test="memberNo != '_admin'">
                pr.m_no = #{memberNo}
            </if>
        </where>
        )

    </select>

    <update id="updatePartyStatus">
        UPDATE
            party_request
        SET
            status_code = #{statusCode.code}
        WHERE
            m_no = #{memberNo};
    </update>


    <insert id="insertPartyMember" parameterType="com.gongzone.central.party.accept.domain.RequestParty">
        <selectKey keyColumn="requestPrice" keyProperty="requestPrice" resultType="int" order="BEFORE">
            SELECT
            (#{requestAmount} * (SELECT CEIL(ROUND(p.p_price / p.p_amount, -1)) FROM party AS p WHERE p.p_no = #{partyNo})) AS requestPrice
        </selectKey>
        INSERT INTO party_member
        (p_member_no, p_no, m_no, pm_amount, pm_price, member_join_date, member_is_leader)
        VALUES (
                   #{partyMemberNo},
                   #{partyNo},
                   #{memberNo},
                   #{requestAmount},
                   #{requestPrice},
                   NOW(),
                   '파티원'
               )
    </insert>

    <update id="updateAmountMember" parameterType="com.gongzone.central.party.accept.domain.RequestParty">
        UPDATE party
        SET
            p_amount_remain = p_amount_remain - #{requestAmount},
            p_price_remain = p_price_remain - #{requestPrice},
            status_code = CASE
                              WHEN p_amount_remain - #{requestAmount} = 0 THEN 'S060102'
                              ELSE status_code
                END
        WHERE p_no = #{partyNo};
    </update>

    <delete id="deletePartyStatus">
        UPDATE
            party_request
        SET
            status_code = #{statusCode.code}
        WHERE
            m_no = #{memberNo};
    </delete>

    <select id="requestMemberBymemberNo" resultType="com.gongzone.central.party.accept.domain.RequestParty">
        SELECT
            p_request_no AS requestNo,
            p_no AS partyNo,
            m_no AS memberNo,
            request_amount AS requestAmount,
            request_date AS requestDate,
            status_code AS statusCode
        FROM
            party_request
        WHERE
            m_no = #{memberNo} AND p_no = #{partyNo};
    </select>



    <select id="lastPartyMemberNo" resultType="String">
        select
            MAX(p_member_no)
        FROM
            party_member
    </select>

    <delete id="kickPartyMember">
        DELETE FROM party_member
        WHERE
            p_no = #{partyNo} AND m_no = #{memberNo};
    </delete>

    <delete id="deletePartyRequest">
        DELETE FROM party_request
        WHERE
            p_no = #{partyNo} AND m_no = #{memberNo};
    </delete>

    <select id="getPartyUnitPrice" parameterType="String" resultType="int">
        SELECT CEIL(ROUND(p.p_price / p.p_amount, -1))
        FROM party AS p
        WHERE p.p_no = #{partyNo}
    </select>

    <update id="updateAmountAfterKick" parameterType="com.gongzone.central.party.accept.domain.RequestParty">
        UPDATE party
        SET
            p_amount_remain = p_amount_remain + #{requestAmount},
            p_price_remain = p_price_remain + #{requestPrice}
        WHERE p_no = #{partyNo};
    </update>

    <insert id="requestJoin" parameterType="com.gongzone.central.party.accept.domain.RequestParty">
        INSERT INTO party_request
            (p_no, m_no, request_amount, request_date, status_code)
        VALUES
            (
                #{partyNo},
                #{memberNo},
                #{requestAmount},
                NOW(),
                "S060201"
            )
    </insert>

    <select id="getPartyDetail" resultType="AcceptDetail">
        SELECT
            b.b_title AS boardTitle,
            CONCAT('[', c.c_group1, ']', c.c_group2, ' - ', c.c_group3) AS partyCateCode,
            p.p_url AS productUrl,
            b.b_body AS boardBody,
            p.p_amount AS partyAmount,
            p.p_amount_remain AS remainAmount,
            p.p_price AS partyPrice,
            p.p_price_remain AS remainPrice,
            b.b_period AS endDate,
            p.status_code AS status,
            CONCAT(l.location_do, ' ', l.location_si, ' ', l.location_gu, ' ', l.location_dong, ' ', l.location_detail) AS address,
            p.p_no AS partyNo,
            b.m_no AS partyLeader,
            f.file_path AS img,
            b.b_no AS boardNo,
            ps.shipping_no AS shippingNo,
            pts.status_code AS settlementCode

        FROM
            party AS p
                INNER JOIN
            board AS b
            ON
                p.b_no = b.b_no
                INNER JOIN
            location AS l
            ON
                b.b_no = l.b_no
                INNER JOIN
            category AS c
            ON
                c.c_code = p.c_code
                INNER JOIN
            file_relation AS fr
            ON
                b.b_no = fr.file_usage
                INNER JOIN
            file AS f
            ON
                f.file_no = fr.file_no
                LEFT JOIN
            party_shipping AS ps
            ON
                p.p_no = ps.p_no
                LEFT JOIN
            party_settlement AS pts
            ON
                p.p_no = pts.p_no
        WHERE
                p.p_no = #{partyNo};
    </select>


    <update id="completeBoardStatus">
        UPDATE board
        SET
            status_code='S040102'
        WHERE
            b_no = #{boardNo};
    </update>

    <update id="completePartyStatus">
        UPDATE party
        SET
            status_code='S060103'
        WHERE
            p_no = #{partyNo};
    </update>

    <insert id="insertPartyPurchase">
        INSERT INTO party_purchase
            (p_no, p_member_no, purchase_price, status_code)
        VALUES
            (#{partyNo}, #{partyMemberNo}, #{requestPrice}, 'S060301')
    </insert>

    <insert id="updatePartyLeaderPurchase">

            UPDATE
                party_purchase
            SET
                status_code = 'S060302'
            WHERE
                m_no = #{memberNo};

    </insert>

    <select id="getPartyMemberPurchase" resultType="PartyMemberPurchase">
        SELECT
            pp.purchase_no AS purchaseNo,
            pp.purchase_price AS purchasePrice,
            mp.m_point AS memberPoint
        FROM
            party_purchase AS pp
                INNER JOIN
            party_member AS pm
            ON
                pp.p_member_no = pm.p_member_no
                INNER JOIN
            member_point AS mp
            ON
                pm.m_no = mp.m_no
        WHERE
            pm.m_no = #{memberNo} AND pm.p_no = #{partyNo}
    </select>

    <select id="getPartyLeaderByPartyNo">
        SELECT
            m_no AS memberNo
        FROM
            party_member
        WHERE
            p_no = #{partyNo}
          AND
            member_is_leader = '파티장'
    </select>


</mapper>
